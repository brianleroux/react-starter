{
  "name": "connect-phonegap",
  "description": "Connect middleware to serve a PhoneGap app.",
  "version": "0.9.0",
  "homepage": "https://github.com/phonegap/connect-phonegap",
  "repository": {
    "type": "git",
    "url": "git@github.com:phonegap/connect-phonegap.git"
  },
  "keywords": [
    "connect",
    "express",
    "middleware",
    "phonegap"
  ],
  "preferGlobal": "false",
  "main": "./lib/index.js",
  "scripts": {
    "test": "jasmine-node --color spec"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "address": "0.0.3",
    "connect": "2.12.0",
    "connect-inject": "0.3.2",
    "gaze": "0.4.3",
    "home-dir": "0.1.2",
    "node-static": "0.7.0",
    "request": "2.33.0",
    "request-progress": "0.3.1",
    "shelljs": "0.2.6",
    "tar": "0.1.19",
    "useragent": "2.0.8"
  },
  "devDependencies": {
    "chdir": "0.0.0",
    "jasmine-node": "1.8.0",
    "supertest": "0.8.3"
  },
  "optionalDependencies": {},
  "contributors": [
    {
      "name": "Tim Kim",
      "email": "timk@adobe.com"
    },
    {
      "name": "Michael Brooks",
      "email": "michael@michaelbrooks.ca",
      "url": "http://michaelbrooks.ca/"
    }
  ],
  "readme": "# connect-phonegap [![Build Status][travis-ci-img]][travis-ci-url]\n\n> Connect middleware to serve a PhoneGap app.\n\n## Examples\n\n### Standalone\n\n    var phonegap = require('connect-phonegap');\n    phonegap.listen();\n\n### Express\n\n    var phonegap = require('connect-phonegap'),\n        express = require('express'),\n        app = express();\n\n    app.use(phonegap());\n    app.listen(3000);\n\n### Connect\n\n    var phonegap = require('connect-phonegap'),\n        connect = require('connect'),\n        app = connect();\n\n    app.use(phonegap());\n    app.listen(3000);\n\n### HTTP\n\n    var phonegap = require('connect-phonegap'),\n        http = require('http');\n\n    var server = http.createServer(phonegap());\n    server.listen(3000);\n\n## API\n\n    var phonegap = require('connect-phonegap');\n\n### phonegap()\n\nOptions:\n\n  - `[options]` {Object}\n  - `[autoreload]` {Boolean} toggle AutoReload watch (default: true).\n\nEvents:\n\n  - `error` is emitted when an error occurs.\n  - `log` is emitted with log info.\n\nReturn:\n\n  - {Function} request listener that can be provided to `http.Server` or\n    used as `connect` middleware.\n\nExample:\n\n    var phonegap = require('connect-phonegap')(),\n        middleware = phonegap();\n\n    // subscribe to events\n    middleware.on('log', function() {\n        console.log.apply(this, arguments);\n    });\n\n    // use as middleware\n    app.use(middleware);\n\n    // or\n\n    // use as request listener\n    http.createServer(middleware).listen(3000);\n\n### phonegap.listen(options, [callback])\n### phonegap.serve(options, [callback])\n\nCreates a local server to serve up the project. The intended\nreceiver is the PhoneGap App but any browser can consume the\ncontent.\n\nOptions:\n\n  - `[options]`\n    - `[port]` {Number} to listen on (Default: 3000).\n    - all options available to phonegap() middleware.\n\nEvents:\n\n   - `complete` is triggered when server starts.\n    - `data` {Object}\n      - `server` {http.Server} is the server running.\n      - `address` {String} is the server address.\n      - `port` {Number} is the server port.\n  - `error` trigger when there is an error with the server or request.\n    - `e` {Error} is null unless there is an error.\n  - all events available to phonegap() middleware.\n  - all events available to `http.Server`\n\nReturn:\n\n  - {http.Server} instance that is also an event emitter.\n\nExample:\n\n    phonegap.listen()\n            .on('complete', function(data) {\n                // server is now running\n            })\n            .on('error', function(e) {\n                // an error occured\n            });\n\n### phonegap.create(options)\n\nThe project is created from the same app template used by the PhoneGap CLI\nand Cordova CLI. When a template does not exist, it is fetched and saved\nin the common directory:\n\n    ~/.cordova/lib/www/phonegap/VERSION/\n\nOptions:\n\n  - `options` {Object}\n    - `path` {String} is the path to create the project.\n    - `version` {String} defines the PhoneGap app version.\n\nEvents:\n\n  - `progress` emits state while downloading the app template.\n    - `state` {Object} with `received`, `total`, and `percentage`.\n  - `error` emitted when an error occurs.\n    - `e` {Error}\n  - `complete` emits when the project has been created.\n    - `data` {Object} is indentical to the input `options`.\n\nExample:\n\n    phonegap.create({\n        path: 'path/to/app',\n        version: '3.3.0'\n    })\n    .on('progress', function(state) {\n        // only emitted when downloading a template.\n        // state values are only defined when response supports\n        // content-length header.\n        if (state.percentage) {\n            console.log('downloaded: ' + state.percentage + '%');\n        }\n    }\n    .on('error', function(e) {\n        // handle error\n    })\n    .on('complete', function(data) {\n        // data.path is the app path\n        console.log('created project at: ' + data.path);\n    });\n\n[travis-ci-img]: https://travis-ci.org/phonegap/connect-phonegap.png?branch=master\n[travis-ci-url]: http://travis-ci.org/phonegap/connect-phonegap\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/phonegap/connect-phonegap/issues"
  },
  "_id": "connect-phonegap@0.9.0",
  "_from": "connect-phonegap@0.9.0"
}
