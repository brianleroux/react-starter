{
  "name": "iter",
  "version": "0.0.5",
  "description": "Serial & Parallel Iteration",
  "main": "index.js",
  "scripts": {
    "test": "highkick"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:azer/iter.git"
  },
  "devDependencies": {
    "fox": "*"
  },
  "keywords": [
    "iteration",
    "loops",
    "serial",
    "async"
  ],
  "license": "BSD",
  "dependencies": {
    "just-next-tick": "0.0.0"
  },
  "readme": "Iterates a function asynchronously.\n\n## Install\n\n```\nnpm install iter\n```\n\n## Usage\n\n```js\niter(20, function(next, i){ /* or: iter(0, 20, .. */\n  console.log('i: %d', i);\n\n  setTimeout(function(){\n    next();\n  }, 250);\n});\n```\n\nCallbacks;\n\n```\niter(20)\n  .error(function(error){ throw error; })\n  .done(function(){ console.log('done'); })\n  .run(function(next, i){\n    console.log('i: %d', i);\n    next(); // to pass an error: next(new Error('failed!'))\n  });\n```\n\n## Parallel\n\nIt's serial by default. Use `parallel` method to make it parallel.\n\n```js\niter.parallel(5, function (done, i) {\n  setTimeout(function () {\n    console.log(i)\n    done()\n  }, 1000 - (i * 200))\n})\n```\n\nWill output:\n\n```\n4\n3\n2\n1\n0\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/azer/iter/issues"
  },
  "homepage": "https://github.com/azer/iter",
  "_id": "iter@0.0.5",
  "dist": {
    "shasum": "01ba7b12a4c7232641e369c5e226afa9e2238e57"
  },
  "_from": "iter@0.0.5",
  "_resolved": "https://registry.npmjs.org/iter/-/iter-0.0.5.tgz"
}
